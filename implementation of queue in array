class Queue:
    def __init__(self, capacity):
        self.queue = [None] * capacity  # Initialize an array with None
        self.capacity = capacity
        self.front = 0
        self.rear = -1
        self.size = 0

    # Check if the queue is full
    def is_full(self):
        return self.size == self.capacity

    # Check if the queue is empty
    def is_empty(self):
        return self.size == 0

    # Enqueue: Add an element to the rear of the queue
    def enqueue(self, item):
        if self.is_full():
            print("Queue is full. Cannot enqueue.")
            return
        
        # Move the rear circularly and add the item
        self.rear = (self.rear + 1) % self.capacity
        self.queue[self.rear] = item
        self.size += 1
        print(f"Enqueued {item}")

    # Dequeue: Remove an element from the front of the queue
    def dequeue(self):
        if self.is_empty():
            print("Queue is empty. Cannot dequeue.")
            return None
        
        # Get the front item and move the front circularly
        item = self.queue[self.front]
        self.queue[self.front] = None  # Optional: Clear the dequeued position
        self.front = (self.front + 1) % self.capacity
        self.size -= 1
        print(f"Dequeued {item}")
        return item

    # Peek: Get the front item without removing it
    def peek(self):
        if self.is_empty():
            print("Queue is empty. Nothing to peek.")
            return None
        return self.queue[self.front]

    # Display the queue elements
    def display(self):
        if self.is_empty():
            print("Queue is empty.")
        else:
            print("Queue:", end=" ")
            i = self.front
            for _ in range(self.size):
                print(self.queue[i], end=" ")
                i = (i + 1) % self.capacity
            print()


# Driver Code to test the queue implementation
if __name__ == "__main__":
    q = Queue(5)  # Create a queue with capacity 5

    q.enqueue(10)
    q.enqueue(20)
    q.enqueue(30)
    q.enqueue(40)
    q.enqueue(50)
    q.display()  # Expected output: Queue: 10 20 30 40 50

    q.dequeue()
    q.display()  # Expected output: Queue: 20 30 40 50

    q.enqueue(60)
    q.display()  # Expected output: Queue: 20 30 40 50 60

    print("Front item is:", q.peek())  # Expected output: Front item is: 20

    q.dequeue()
    q.dequeue()
    q.display()  # Expected output: Queue: 40 50 60
